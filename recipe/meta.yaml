{% set name = "mlflow" %}
{% set version = "2.18.0" %}

# MLFlow offers two variants, a "normal" install and a "skinny" install with
# a reduced installation and fewer dependencies. The skinny installation is obtained
# by setting the environment variable MLFLOW_SKINNY at pip install time. For conda
# we accomplish this with two conda packages, mflow and mlflow-skinny. Note that this
# is not the same as matplotlib-base/matplotlib, where the only differences is the
# dependency set; the installed code is different as well.

{% if mlflow_variant == "skinny" %}
{% set mlflow_suffix = "-skinny" %}
{% set mlflow_other = "mlflow" %}
{% else %}
{% set mlflow_suffix = "" %}
{% set mlflow_other = "mlflow-skinny" %}
{% endif %}

package:
  name: mlflow{{ mlflow_suffix }}
  version: {{ version }}

source:
  # Using github as source for mlflow-skinny which does not exist on PyPI
  url: https://github.com/mlflow/mlflow/archive/refs/tags/v{{ version }}.zip
  sha256: 910ad1e2fce93b412063637d465e9291c99678a3bbccbf2b4f7736887321f44b

build:
  number: 0
  skip: true  # [py<39 or s390x]
  script: |
{% if mlflow_variant == "skinny" %}
    export MLFLOW_SKINNY=1  # [not win]
    set MLFLOW_SKINNY=1  # [win]
    cp {{ SRC_DIR }}/pyproject.toml orig_pyproject.toml  # [not win]
    copy {{ SRC_DIR }}\pyproject.toml orig_pyproject.toml  # [win]
    cp {{ SRC_DIR }}/pyproject.skinny.toml pyproject.toml  # [not win]
    copy {{ SRC_DIR }}\pyproject.skinny.toml pyproject.toml  # [win]
{% endif %}
    {{ PYTHON }} -m pip install . --no-deps --no-build-isolation --ignore-installed --no-cache-dir -vv
{% if mlflow_variant == "skinny" %}
    cp orig_pyproject.toml pyproject.toml  # [not win]
    copy orig_pyproject.toml pyproject.toml  # [win]
{% endif %}
  entry_points:
    - mlflow=mlflow.cli:cli

requirements:
  host:
    - pip
    - python
    - setuptools
    - wheel
  run:
    - python
    - cachetools >=5.0.0,<6
    - click >=7.0,<9
    - cloudpickle <4
    - databricks-sdk >=0.20.0,<1
    - gitpython >=3.1.9,<4
    - importlib-metadata <9,>=3.7.0,!=4.7.0
    - opentelemetry-api >=1.9.0,<3
    - opentelemetry-sdk >=1.9.0,<3
    - packaging <25
    # required on imports for win
    - pytz <2025  # [win]
    - protobuf >=3.12.0,<6
    - pyyaml >=5.1,<7
    - requests >=2.17.3,<3
    - sqlparse >=0.4.0,<1
{% if mlflow_variant != "skinny" %}
    - flask <4
    - jinja2 <4,>=2.11  # [not win]
    - jinja2 <4,>=3.0  # [win]
    - alembic <2,!=1.10.0
    - docker-py >=4.0.0,<8
    - graphene <4
    - gunicorn <24  # [not win]
    - markdown >=3.3,<4
    - matplotlib-base <4
    - numpy <3
    - pandas <3
    - pyarrow <19,>=4.0.0
    - scikit-learn <2
    - scipy <2
    - sqlalchemy >=1.4.0,<3
    - waitress <4  # [win]
{% endif %}
  run_constrained:
    - {{ mlflow_other }} <0a0
    # extras
    - google-cloud-storage >=1.30.0
    - azureml-core >=1.2.0
    # mlserver
    - mlserver >=1.2.0, !=1.3.1
    - mlserver-mlflow >=1.2.0,!=1.3.1
    # mlflow-gateway, mlflow-skinny-gateway, genai
    - pydantic >=1.0,<3
    - fastapi <1
    - uvicorn-standard <1
    - watchfiles <1
    - aiohttp <4
    - boto3 >=1.28.56,<2
    - tiktoken <1
    - slowapi >=0.1.9,<1
    # databricks
    - azure-storage-file-datalake >12
    - google-cloud-storage >=1.30.0
    - boto3 >1
    # langchain
    - langchain >=0.1.0,<=0.3.7

test:
  imports:
    - mlflow
    - mlflow.entities
    - mlflow.projects
    - mlflow.protos
    - mlflow.rfunc
    - mlflow.store
    - mlflow.tracking
    - mlflow.utils
{% if mlflow_variant != "skinny" %}
    - mlflow.models
    - mlflow.pyfunc
    - mlflow.pytorch
    - mlflow.sagemaker
    - mlflow.server
{% endif %}
  source_files:
    - tests/artifacts
  requires:
    - pip
    - pytest
    - pillow
    - numpy
  commands:
    - mlflow --help
    - mlflow --version
    - pip check
    # these tests come from the conda-forge recipe
{% if mlflow_variant != "skinny" %}
    - mlflow recipes --help
    # This should not be packaged
    - test ! -f $SP_DIR/pylint_plugins           # [unix]
    - echo "Checking 'mlflow' exists..."         # [unix]
    - pip list | grep "mlflow \+${PKG_VERSION}"  # [unix]
    # smoke tests
    # skip test_log_artifact_windows_path_with_hostname (run only for win)
    # because needs a data file
    - pytest -vv tests/artifacts -k "not test_log_artifact_windows_path_with_hostname"
{% else %}
    - echo "Checking 'mlflow-skinny' exists..."         # [unix]
    - pip list | grep "mlflow-skinny \+${PKG_VERSION}"  # [unix]
    # smoke tests
    # skip test_load_image because numpy is not included in the skinny variant
    # skip test_log_artifact_windows_path_with_hostname (run only for win)
    # because needs a data file
    - pytest -vv tests/artifacts -k "not (test_load_image or test_log_artifact_windows_path_with_hostname)"
{% endif %}
    # test from .github/workflows/test-package-build.yml#L97
    - python -c "import mlflow; print(mlflow.__version__); assert(mlflow.__version__ == '{{ version }}');"

about:
  home: https://mlflow.org
{% if mlflow_variant == "skinny" %}
  summary: "MLflow Skinny: A Lightweight Machine Learning Lifecycle Platform Client"
  description: |
    MLflow Skinny is a lightweight MLflow package without SQL storage, server,
    UI, or data science dependencies.
{% else %}
  summary: "MLflow: A Machine Learning Lifecycle Platform"
  description: |
    MLflow is a platform to streamline machine learning development, including tracking
    experiments, packaging code into reproducible runs, and sharing and deploying models.
    MLflow offers a set of lightweight APIs that can be used with any existing machine
    learning application or library (TensorFlow, PyTorch, XGBoost, etc), wherever you
    currently run ML code (e.g. in notebooks, standalone applications or the cloud).
{% endif %}
  license: Apache-2.0
  license_family: APACHE
  license_file: LICENSE.txt
  doc_url: https://mlflow.org
  dev_url: https://github.com/mlflow/mlflow

extra:
  feedstock-name: mlflow
  recipe-maintainers:
    - harupy
    - aarondav
    - ahirreddy
    - andrewmchen
    - aveshcsingh
    - dbczumar
    - jaroslawk
    - mateiz
    - mparkhe
    - pogil
    - smurching
    - sueann
    - tomasatdatabricks
    - xhochy
    - zangr
    - janjagusch
